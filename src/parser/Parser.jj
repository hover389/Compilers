/* Bantam Java Compiler and Language Toolset.

   Copyright (C) 2007 by Marc Corliss (corliss@hws.edu) and 
                         E Christopher Lewis (lewis@vmware.com).
   ALL RIGHTS RESERVED.

   The Bantam Java toolset is distributed under the following 
   conditions:

     You may make copies of the toolset for your own use and 
     modify those copies.

     All copies of the toolset must retain the author names and 
     copyright notice.

     You may not sell the toolset or distribute it in 
     conjunction with a commerical product or service without 
     the expressed written consent of the authors.

   THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS 
   OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE 
   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
   PARTICULAR PURPOSE. 
*/
options {
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(Parser)
  package parser;

  import util.ErrorHandler;
  import java.util.Stack;
  import java.util.Iterator;

  /** A class for performing syntactic analysis */
  public class Parser 
  {
      /** Maximum string size allowed */
      public static final int MAX_STRING_SIZE = 5000;

      /** Is debugging enabled? */
      private static boolean debug = false;

      /** Filenames of source files */
      private static String[] filenames = null;

      /** Input streams of source files */
      private static java.io.FileInputStream[] fileReaders = null;

      /** Current file number (index into filenames and fileReaders) */
      private static int fileCnt = 0;

      public Parser(String[] filenames, boolean debug) 
      {
	  // set debugging flag
	  this.debug = debug;
	  
	  // initialize filenames field to parameter filenames
	  // used later for finding the name of the current file
	  this.filenames = filenames;
	  
	  // check that there is at least one specified filename
	  if (filenames.length == 0)
	      throw new RuntimeException(
                     "Must specify at least one filename to scan");
	  // must initialize readers for each file (FileInputStream)
	  fileReaders = new java.io.FileInputStream[filenames.length];
	  for (int i = 0; i < filenames.length; i++) {
	      // try...catch checks if file is found
	      try {
		  // create the ith file reader
		  fileReaders[i] = new java.io.FileInputStream(filenames[i]);
	      }
	      catch(java.io.FileNotFoundException e) {
		  // if file not found then report an error and exit
		  System.err.println(
                       "Error: file '" + filenames[i] + "' not found");
		  System.exit(1);
	      }
	  }

	  if (jj_initialized_once) {
	      System.out.println(
                "ERROR: Second call to constructor of static parser.  You must");
	      System.out.println(
         "       either use ReInit() or set the JavaCC option STATIC to false");
	      System.out.println(
         "       during parser generation.");
	      throw new Error();
	  }
	  jj_initialized_once = true;

	  try { jj_input_stream = 
                         new JavaCharStream(fileReaders[0], null, 1, 1); } 
	  catch(java.io.UnsupportedEncodingException e) { 
	      throw new RuntimeException(e); 
	  }

	  ReInit(fileReaders[0]);
      }

      /** Parse program
        * @return true if the source program is syntactically correct
        * */
      public boolean parse() {
	  // initialize the error handler and class list
	  ErrorHandler errorHandler = new ErrorHandler();

	  // loop over the files
	  for (fileCnt = 0; fileCnt < fileReaders.length; fileCnt++) {
	      try {
		  if (fileCnt > 0) 
		        jj_input_stream.ReInit(fileReaders[fileCnt], 1, 1);

		  Parser.Program();

		  System.out.println( 
                        filenames[fileCnt] + " is syntactically correct.");

	      }
	      catch(ParseException e) {
		  String message = e.toString();
		  int index = message.indexOf(": ");
		  message = message.substring(index+2,message.length());
		  errorHandler.register(errorHandler.PARSE_ERROR, 
                                        filenames[fileCnt], 
					JavaCharStream.getBeginLine(), message);
	      }
	  }
	  errorHandler.checkErrors();

	  return true; 
      }

      /** Get the filename of the file currently being scanned */
      public static String getCurrFilename() {
	  return filenames[fileCnt];
      }

  }
PARSER_END(Parser)

TOKEN_MGR_DECLS :
{
    // Use this for error handling
    private static ErrorHandler errorHandler = new ErrorHandler();
}

/******************************************/
/* copy your lexer rules from A1 below... */
/******************************************/

TOKEN : /* KEYWORDS and SPECIAL SYMBOLS */
{
  < CLASS: "class" >
| <COMMA: ",">
| <BREAK: "break">
| <LBRACKET: "[">
| <RBRACKET: "]">
| <LBRACE: "{">
| <RBRACE: "}">
| <LPAREN: "(">
| <RPAREN: ")">
| <RETURN: "return">
| <CASE: "case">
| <ELSE: "else">
| <EXTENDS: "extends">
| <FINALLY: "finally">
| <FOR: "for">
| <IF: "if">
| <IMPORT: "import">
| <INSTOF: "instanceof">
| <NEW: "new">
| <THROW: "throw">
| <THROWS: "throws">
| <TRANSIENT: "transient">
| <TRY: "try">
| <WHILE: "while">
| <MULT: "*">
| <ADD: "+">
| <SUB: "-">
| <LESSTHAN: "<">
| <GREATERTHAN: ">">
| <SEMICOLON: ";">
| <ASSIGN: "=">
| <MOD: "%">
| <DIV: "/">
| <NOT: "!">
| <EQUALS: "==">
| <NOTEQUALS: "!=">
| <LESSEQUAL: "<=">
| <GREATEREQUAL: ">=">
| <AND: "&&">
| <OR: "||">
| <INCREMENT: "++">
| <DECREMENT: "--">
| <MEMBERREF: ".">


}

TOKEN : /* CONSTANTS - FIXME: broken, only match "Foo", "Goo", or "Zoo" */
{
  < INT_CONST: (["0"-"9"])+ >
	
|
  < BOOLEAN_CONST: "true"|"false" >
|
  < STRING_CONST: "\""(("\\\"")*(~["\""])+)*"\"" >
   
	}
TOKEN : /* IDs - FIXME: broken, only match "Boo" */
{
  < ID: ["A"-"Z","a"-"z"](["a"-"z","A"-"Z","0"-"9","#","@","$","^","&",":","?","~","`","\'","_"])* >

   
}

<*>
TOKEN : /* EOF */
{
  <EOF> { errorHandler.checkErrors(); }
}

SKIP:
{
	" "
|	"\n"
|	"\t"
|	"\r"
| < "//" (~["\r", "\n"])* >
| < "/*" > : MULTICOMMENT

}

<MULTICOMMENT> SKIP :
{
	<"*/"> : DEFAULT
|  	< ~[]>
}

/******************************************/
/* Add your grammar rules below ...       */
/******************************************/

/* 

Precedence (from highest to lowest)
10  new  ()
9   . (dispatch) [] ++ -- (postfix)[left]
8   - (unary) !     ++ -- (prefix) [right]
7   (casting)                      [right]
6   * / %                          [left]
5   + -                            [left]
4   < <= > >= instanceof           [left]
3   == !=                          [left]
2   &&                             [left]
1   ||                             [left]
0   =                              [right]

*/


void Program() :
{}
{
   (Class())+  <EOF>
}

void Class():
{}
{
	<CLASS> <ID> (<EXTENDS> <ID>)? <LBRACE> (Member())* <RBRACE>
}

void Member():
{}
{
    LOOKAHEAD(5)
	Method() 
|	Field()
}

void Method():
{}
{
	<ID> (<LBRACKET><RBRACKET>)? <ID> <LPAREN> (Formal() (<COMMA>))* <RPAREN> <LBRACE> (Stmt())* <RBRACE>
}


void Field():
{}
{
	<ID> (<LBRACKET> <RBRACKET>)? <ID> (<ASSIGN> Expr())? <SEMICOLON>

}

void Formal():
{}
{
	<ID> (<LBRACKET> <RBRACKET>)? <ID>
}

void Stmt():
{}
{
    LOOKAHEAD(3)
	ExprStmt()
|	LOOKAHEAD(3)DeclStmt()
|	IfStmt()
|	WhileStmt()
|	ForStmt()
|	BreakStmt()
|	ReturnStmt()
|	BlockStmt()

}

void ExprStmt():
{}
{
	Expr() <SEMICOLON>
}

void DeclStmt():
{}
{
	<ID> (<LBRACKET> <RBRACKET>)? <ID> <ASSIGN> Expr() <SEMICOLON>
}


void IfStmt():
{}
{
	<IF> <LPAREN> Expr() <RPAREN> Stmt() (LOOKAHEAD(2)<ELSE> Stmt())?
}


void WhileStmt():
{}
{
	<WHILE> <LPAREN> Expr() <RPAREN> Stmt()
}

void ForStmt():
{}
{
	<FOR> <LPAREN> (Expr())? <SEMICOLON> (Expr())? <SEMICOLON> (Expr())? <RPAREN> Stmt()
}

void BreakStmt():
{}
{
	<BREAK> <SEMICOLON>
}

void ReturnStmt():
{}
{
	<RETURN> (Expr())? <SEMICOLON>
}


void BlockStmt():
{}
{
    <LBRACE> (Stmt())* <RBRACE>
}



void Expr():
{}
{
	LOOKAHEAD(2)<ID> (<LBRACKET> Expr() <RBRACKET>)? <ASSIGN> Expr() ExprPrime()
|	Expr1() ExprPrime()


}

void ExprPrime():
{}
{
	<MEMBERREF> <ID> (<LBRACKET> Expr() <RBRACKET>)? <ASSIGN> Expr() ExprPrime()
|	{}
}

void Expr1():
{}
{
	Expr2() (<OR> Expr2())*
}


void Expr2():
{}
{
	Expr3() (<AND> Expr3())*
}


void Expr3():
{}
{
	Expr4() (<EQUALS>|<NOTEQUALS> Expr4())*
}


void Expr4():
{}
{
	Expr5() (<LESSTHAN>|<GREATERTHAN>|<LESSEQUAL>|<GREATEREQUAL> Expr5())* Expr4Prime()

}

void Expr4Prime():
{}
{
	<INSTOF> <ID> (LOOKAHEAD(2)<LBRACKET><RBRACKET>)? Expr4Prime()
|	{}
}


void Expr5():
{}
{
//fix!!!!!!!!!!!!!!!!!!!!!!
	Expr6() (<SUB>|<ADD> Expr6())*
}



void Expr6():
{}
{
	Expr7() (<MULT>|<DIV>|<MOD> Expr7())*
}


void Expr7():
{}
{
	LOOKAHEAD(2)<LPAREN> <ID> (<LBRACKET> <RBRACKET>)? <RPAREN>	<LPAREN> Expr7() <RPAREN>
|	Expr8()
}

void Expr8():
{}
{
	<SUB> Expr8()	
|	<NOT> Expr8()
|	<INCREMENT> Expr8()
|	<DECREMENT> Expr8()
|	Expr9()
}

void Expr9():
{}
{
	

	<ID> <LPAREN> (Expr() (<COMMA>)?)* <RPAREN> Expr9Prime()
|	Expr10() Expr9Prime()
|	<LBRACKET> <RBRACKET> Expr9Prime()
}

void Expr9Prime():
{}
{
	<INCREMENT> Expr9Prime()
|	<DECREMENT> Expr9Prime()
|	<MEMBERREF> <ID> <LPAREN> (Expr() (<COMMA>)?)* <RPAREN> Expr9Prime()
|	{}
}

void Expr10():
{}
{
	<NEW> <ID> Expr10Prime()
|	Expr11()	
}

void Expr10Prime():
{}
{
	<LPAREN> <RPAREN>
|	<LBRACKET> Expr11() <RBRACKET>
}

void Expr11():
{}
{
	ConstExpr()
|	<LPAREN> Expr() <RPAREN>
}


void ConstExpr():
{}
{
	<INT_CONST> | <BOOLEAN_CONST> | <STRING_CONST>
}

